2018-12-18 21:07:49 jdbc[3]: exception
org.h2.jdbc.JdbcSQLException: Table "REQ_BATCH" not found; SQL statement:
SELECT batch_id,schedule_id,env_setting_id,group_id,created_by_id,modified_by_id,name,enable,time_expression,statuts,created_on,updated_on  FROM req_batch [42102-197]
2018-12-18 21:23:26 database: flush
org.h2.message.DbException: General error: "java.lang.IllegalStateException: The file is locked: nio:/Users/haley/Documents/w/OmegaTester/data1/h2db.mv.db [1.4.196/7]" [50000-196]
	at org.h2.message.DbException.get(DbException.java:168)
	at org.h2.message.DbException.convert(DbException.java:295)
	at org.h2.mvstore.db.MVTableEngine$1.uncaughtException(MVTableEngine.java:95)
	at org.h2.mvstore.MVStore.panic(MVStore.java:378)
	at org.h2.mvstore.MVStore.<init>(MVStore.java:361)
	at org.h2.mvstore.MVStore$Builder.open(MVStore.java:2930)
	at org.h2.mvstore.db.MVTableEngine$Store.open(MVTableEngine.java:155)
	at org.h2.mvstore.db.MVTableEngine.init(MVTableEngine.java:100)
	at org.h2.engine.Database.getPageStore(Database.java:2476)
	at org.h2.engine.Database.open(Database.java:697)
	at org.h2.engine.Database.openDatabase(Database.java:276)
	at org.h2.engine.Database.<init>(Database.java:270)
	at org.h2.engine.Engine.openSession(Engine.java:64)
	at org.h2.engine.Engine.openSession(Engine.java:176)
	at org.h2.engine.Engine.createSessionAndValidate(Engine.java:154)
	at org.h2.engine.Engine.createSession(Engine.java:137)
	at org.h2.engine.Engine.createSession(Engine.java:27)
	at org.h2.engine.SessionRemote.connectEmbeddedOrServer(SessionRemote.java:354)
	at org.h2.jdbc.JdbcConnection.<init>(JdbcConnection.java:116)
	at org.h2.jdbc.JdbcConnection.<init>(JdbcConnection.java:100)
	at org.h2.Driver.connect(Driver.java:69)
	at java.sql.DriverManager.getConnection(DriverManager.java:664)
	at java.sql.DriverManager.getConnection(DriverManager.java:247)
	at com.rp.sql.SQLManager.<init>(Unknown Source)
	at com.rp.gui.database.ConnectionUtil.getSQLManager(Unknown Source)
	at com.rp.gui.database.ConnectionUtil.connect(Unknown Source)
	at com.rp.gui.database.ConnectionUtil.doConnect(Unknown Source)
	at com.rp.gui.database.ConnectionUtil.doConnect(Unknown Source)
	at com.rp.gui.database.ConnectionWizard.doConnect(Unknown Source)
	at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
	at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.lang.reflect.Method.invoke(Method.java:498)
	at com.rp.gui.util.CustomSwingWorker.construct(Unknown Source)
	at com.rp.gui.util.SwingWorker$2.run(Unknown Source)
	at java.lang.Thread.run(Thread.java:748)
Caused by: org.h2.jdbc.JdbcSQLException: General error: "java.lang.IllegalStateException: The file is locked: nio:/Users/haley/Documents/w/OmegaTester/data1/h2db.mv.db [1.4.196/7]" [50000-196]
	at org.h2.message.DbException.getJdbcSQLException(DbException.java:345)
	... 36 more
Caused by: java.lang.IllegalStateException: The file is locked: nio:/Users/haley/Documents/w/OmegaTester/data1/h2db.mv.db [1.4.196/7]
	at org.h2.mvstore.DataUtils.newIllegalStateException(DataUtils.java:765)
	at org.h2.mvstore.FileStore.open(FileStore.java:173)
	at org.h2.mvstore.MVStore.<init>(MVStore.java:347)
	... 31 more
2018-12-18 21:23:30 database: flush
org.h2.message.DbException: General error: "java.lang.IllegalStateException: The file is locked: nio:/Users/haley/Documents/w/OmegaTester/data1/h2db.mv.db [1.4.196/7]" [50000-196]
	at org.h2.message.DbException.get(DbException.java:168)
	at org.h2.message.DbException.convert(DbException.java:295)
	at org.h2.mvstore.db.MVTableEngine$1.uncaughtException(MVTableEngine.java:95)
	at org.h2.mvstore.MVStore.panic(MVStore.java:378)
	at org.h2.mvstore.MVStore.<init>(MVStore.java:361)
	at org.h2.mvstore.MVStore$Builder.open(MVStore.java:2930)
	at org.h2.mvstore.db.MVTableEngine$Store.open(MVTableEngine.java:155)
	at org.h2.mvstore.db.MVTableEngine.init(MVTableEngine.java:100)
	at org.h2.engine.Database.getPageStore(Database.java:2476)
	at org.h2.engine.Database.open(Database.java:697)
	at org.h2.engine.Database.openDatabase(Database.java:276)
	at org.h2.engine.Database.<init>(Database.java:270)
	at org.h2.engine.Engine.openSession(Engine.java:64)
	at org.h2.engine.Engine.openSession(Engine.java:176)
	at org.h2.engine.Engine.createSessionAndValidate(Engine.java:154)
	at org.h2.engine.Engine.createSession(Engine.java:137)
	at org.h2.engine.Engine.createSession(Engine.java:27)
	at org.h2.engine.SessionRemote.connectEmbeddedOrServer(SessionRemote.java:354)
	at org.h2.jdbc.JdbcConnection.<init>(JdbcConnection.java:116)
	at org.h2.jdbc.JdbcConnection.<init>(JdbcConnection.java:100)
	at org.h2.Driver.connect(Driver.java:69)
	at java.sql.DriverManager.getConnection(DriverManager.java:664)
	at java.sql.DriverManager.getConnection(DriverManager.java:247)
	at com.rp.sql.SQLManager.<init>(Unknown Source)
	at com.rp.gui.database.ConnectionUtil.getSQLManager(Unknown Source)
	at com.rp.gui.database.ConnectionUtil.connect(Unknown Source)
	at com.rp.gui.database.ConnectionUtil.doConnect(Unknown Source)
	at com.rp.gui.database.ConnectionUtil.doConnect(Unknown Source)
	at com.rp.gui.database.ConnectionWizard.doConnect(Unknown Source)
	at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
	at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.lang.reflect.Method.invoke(Method.java:498)
	at com.rp.gui.util.CustomSwingWorker.construct(Unknown Source)
	at com.rp.gui.util.SwingWorker$2.run(Unknown Source)
	at java.lang.Thread.run(Thread.java:748)
Caused by: org.h2.jdbc.JdbcSQLException: General error: "java.lang.IllegalStateException: The file is locked: nio:/Users/haley/Documents/w/OmegaTester/data1/h2db.mv.db [1.4.196/7]" [50000-196]
	at org.h2.message.DbException.getJdbcSQLException(DbException.java:345)
	... 36 more
Caused by: java.lang.IllegalStateException: The file is locked: nio:/Users/haley/Documents/w/OmegaTester/data1/h2db.mv.db [1.4.196/7]
	at org.h2.mvstore.DataUtils.newIllegalStateException(DataUtils.java:765)
	at org.h2.mvstore.FileStore.open(FileStore.java:173)
	at org.h2.mvstore.MVStore.<init>(MVStore.java:347)
	... 31 more
2018-12-18 21:27:28 database: flush
org.h2.message.DbException: General error: "java.lang.IllegalStateException: The file is locked: nio:/Users/haley/Documents/w/OmegaTester/data1/h2db.mv.db [1.4.197/7]" [50000-197]
	at org.h2.message.DbException.get(DbException.java:168)
	at org.h2.message.DbException.convert(DbException.java:307)
	at org.h2.mvstore.db.MVTableEngine$1.uncaughtException(MVTableEngine.java:95)
	at org.h2.mvstore.MVStore.handleException(MVStore.java:2506)
	at org.h2.mvstore.MVStore.panic(MVStore.java:383)
	at org.h2.mvstore.MVStore.<init>(MVStore.java:364)
	at org.h2.mvstore.MVStore$Builder.open(MVStore.java:2934)
	at org.h2.mvstore.db.MVTableEngine$Store.open(MVTableEngine.java:155)
	at org.h2.mvstore.db.MVTableEngine.init(MVTableEngine.java:100)
	at org.h2.engine.Database.getPageStore(Database.java:2538)
	at org.h2.engine.Database.open(Database.java:709)
	at org.h2.engine.Database.openDatabase(Database.java:286)
	at org.h2.engine.Database.<init>(Database.java:280)
	at org.h2.engine.Engine.openSession(Engine.java:66)
	at org.h2.engine.Engine.openSession(Engine.java:179)
	at org.h2.engine.Engine.createSessionAndValidate(Engine.java:157)
	at org.h2.engine.Engine.createSession(Engine.java:140)
	at org.h2.engine.Engine.createSession(Engine.java:28)
	at org.h2.engine.SessionRemote.connectEmbeddedOrServer(SessionRemote.java:351)
	at org.h2.jdbc.JdbcConnection.<init>(JdbcConnection.java:124)
	at org.h2.jdbc.JdbcConnection.<init>(JdbcConnection.java:103)
	at org.h2.Driver.connect(Driver.java:69)
	at java.sql.DriverManager.getConnection(DriverManager.java:664)
	at java.sql.DriverManager.getConnection(DriverManager.java:208)
	at org.apache.ibatis.datasource.unpooled.UnpooledDataSource.doGetConnection(UnpooledDataSource.java:201)
	at org.apache.ibatis.datasource.unpooled.UnpooledDataSource.doGetConnection(UnpooledDataSource.java:196)
	at org.apache.ibatis.datasource.unpooled.UnpooledDataSource.getConnection(UnpooledDataSource.java:93)
	at org.apache.ibatis.datasource.pooled.PooledDataSource.popConnection(PooledDataSource.java:404)
	at org.apache.ibatis.datasource.pooled.PooledDataSource.getConnection(PooledDataSource.java:90)
	at org.apache.ibatis.transaction.jdbc.JdbcTransaction.openConnection(JdbcTransaction.java:139)
	at org.apache.ibatis.transaction.jdbc.JdbcTransaction.getConnection(JdbcTransaction.java:61)
	at org.apache.ibatis.executor.BaseExecutor.getConnection(BaseExecutor.java:338)
	at org.apache.ibatis.executor.SimpleExecutor.prepareStatement(SimpleExecutor.java:84)
	at org.apache.ibatis.executor.SimpleExecutor.doQuery(SimpleExecutor.java:62)
	at org.apache.ibatis.executor.BaseExecutor.queryFromDatabase(BaseExecutor.java:326)
	at org.apache.ibatis.executor.BaseExecutor.query(BaseExecutor.java:156)
	at org.apache.ibatis.executor.CachingExecutor.query(CachingExecutor.java:109)
	at org.apache.ibatis.executor.CachingExecutor.query(CachingExecutor.java:83)
	at org.apache.ibatis.session.defaults.DefaultSqlSession.selectList(DefaultSqlSession.java:148)
	at org.apache.ibatis.session.defaults.DefaultSqlSession.selectList(DefaultSqlSession.java:141)
	at org.apache.ibatis.binding.MapperMethod.executeForMany(MapperMethod.java:139)
	at org.apache.ibatis.binding.MapperMethod.execute(MapperMethod.java:76)
	at org.apache.ibatis.binding.MapperProxy.invoke(MapperProxy.java:59)
	at com.sun.proxy.$Proxy24.selectAll(Unknown Source)
	at com.haleywang.monitor.service.impl.BaseServiceImpl.findAll(BaseServiceImpl.java:45)
	at com.haleywang.monitor.schedule.CronScheduleHelper.startSchedule(CronScheduleHelper.java:59)
	at com.haleywang.monitor.schedule.CronScheduleHelper.access$000(CronScheduleHelper.java:22)
	at com.haleywang.monitor.schedule.CronScheduleHelper$1.run(CronScheduleHelper.java:41)
	at java.lang.Thread.run(Thread.java:745)
Caused by: org.h2.jdbc.JdbcSQLException: General error: "java.lang.IllegalStateException: The file is locked: nio:/Users/haley/Documents/w/OmegaTester/data1/h2db.mv.db [1.4.197/7]" [50000-197]
	at org.h2.message.DbException.getJdbcSQLException(DbException.java:357)
	... 49 more
Caused by: java.lang.IllegalStateException: The file is locked: nio:/Users/haley/Documents/w/OmegaTester/data1/h2db.mv.db [1.4.197/7]
	at org.h2.mvstore.DataUtils.newIllegalStateException(DataUtils.java:870)
	at org.h2.mvstore.FileStore.open(FileStore.java:173)
	at org.h2.mvstore.MVStore.<init>(MVStore.java:350)
	... 43 more
2018-12-18 22:51:08 jdbc[3]: exception
org.h2.jdbc.JdbcSQLException: Value too long for column "NAME VARCHAR(50)": "STRINGDECODE('aaaaapackage com.haleywang.db.mapper;  import org.apache.ibatis.mapping.MappedStatement; import tk.mybatis.mapper.... (5169)"; SQL statement:
INSERT INTO PUBLIC.STU (ID, NAME, ADATE) VALUES (1, 'aaaaapackage com.haleywang.db.mapper;  import org.apache.ibatis.mapping.MappedStatement; import tk.mybatis.mapper.entity.EntityColumn; import tk.mybatis.mapper.mapperhelper.EntityHelper; import tk.mybatis.mapper.mapperhelper.MapperHelper; import tk.mybatis.mapper.mapperhelper.MapperTemplate; import tk.mybatis.mapper.mapperhelper.SqlHelper;  import java.util.HashMap; import java.util.Map; import java.util.Set;  /**  * Created by haley on 2018/8/19.  */ public class BaseCreateTableProvider  extends MapperTemplate {       public BaseCreateTableProvider(Class<?> mapperClass, MapperHelper mapperHelper) {         super(mapperClass, mapperHelper);     }      /**      * 查询      *      * @param ms      * @return      */     public String selectOne(MappedStatement ms) {         Class<?> entityClass = getEntityClass(ms);         //修改返回值类型为实体类型         setResultType(ms, entityClass);         StringBuilder sql = new StringBuilder();         sql.append(SqlHelper.selectAllColumns(entityClass));         sql.append(SqlHelper.fromTable(entityClass, tableName(entityClass)));         sql.append(SqlHelper.whereAllIfColumns(entityClass, isNotEmpty()));         return sql.toString();     }      /**      * 查询      *      * @param ms      * @return      */     public String select(MappedStatement ms) {         Class<?> entityClass = getEntityClass(ms);         //修改返回值类型为实体类型         setResultType(ms, entityClass);         StringBuilder sql = new StringBuilder();         sql.append(SqlHelper.selectAllColumns(entityClass));         sql.append(SqlHelper.fromTable(entityClass, tableName(entityClass)));         sql.append(SqlHelper.whereAllIfColumns(entityClass, isNotEmpty()));         sql.append(SqlHelper.orderByDefault(entityClass));         return sql.toString();     }      /**      * 查询      *      * @param ms      * @return      */     public String selectByRowBounds(MappedStatement ms) {         return select(ms);     }      /**      * 根据主键进行查询      *      * @param ms      */     public String selectByPrimaryKey(MappedStatement ms) {         final Class<?> entityClass = getEntityClass(ms);         //将返回值修改为实体类型         setResultType(ms, entityClass);         StringBuilder sql = new StringBuilder();         sql.append(SqlHelper.selectAllColumns(entityClass));         sql.append(SqlHelper.fromTable(entityClass, tableName(entityClass)));         sql.append(SqlHelper.wherePKColumns(entityClass));         return sql.toString();     }      /**      * 查询总数      *      * @param ms      * @return      */     public String selectCount(MappedStatement ms) {         Class<?> entityClass = getEntityClass(ms);         StringBuilder sql = new StringBuilder();         sql.append(SqlHelper.selectCount(entityClass));         sql.append(SqlHelper.fromTable(entityClass, tableName(entityClass)));         sql.append(SqlHelper.whereAllIfColumns(entityClass, isNotEmpty()));         return sql.toString();     }      /**      * 根据主键查询总数      *      * @param ms      * @return      */     public String existsWithPrimaryKey(MappedStatement ms) {         Class<?> entityClass = getEntityClass(ms);         StringBuilder sql = new StringBuilder();         sql.append(SqlHelper.selectCountExists(entityClass));         sql.append(SqlHelper.fromTable(entityClass, tableName(entityClass)));         sql.append(SqlHelper.wherePKColumns(entityClass));         return sql.toString();     }      /**      * 查询全部结果      *      * @param ms      * @return      */     public String createTableSql(MappedStatement ms) {         final Class<?> entityClass = getEntityClass(ms);         //修改返回值类型为实体类型         setResultType(ms, entityClass);         StringBuilder sql = new StringBuilder();          Set<EntityColumn> pks = EntityHelper.getPKColumns(entityClass);         String tName = tableName(entityClass);         Set<EntityColumn> columns = EntityHelper.getColumns(entityClass);          sql.append("create table ")                 .append(tName)                 .append(" (");          int i = 0;         int n = pks.size();         for(EntityColumn pk : pks) {             //sql.append(pk.getColumn()).append(" INTEGER PRIMARY KEY AUTOINCREMENT NOT NULL UNIQUE ");             sql.append(pk.getColumn()).append(" INTEGER PRIMARY KEY AUTO_INCREMENT NOT NULL ");              if(i < n-1) {                 sql.append('','');             }             i++;         }          sql.append(" );");         sql.append("\n");           // alter sql         Map<String, String> typeMap = new HashMap<>();         typeMap.put("java.lang.String", "TEXT");         typeMap.put("java.lang.Long", "BIGINT");         typeMap.put("java.lang.Integer", "INTEGER");         typeMap.put("java.lang.Date", "DATE");         for(EntityColumn columnObj : columns) {             if(columnObj.isId()) {                 continue;             }             sql.append("ALTER TABLE ").append(tName).append(" ADD ")                     .append(columnObj.getColumn())                     .append(" ")                     .append(typeMap.getOrDefault(columnObj.getJavaType().getName(), "TEXT"))                     .append(";")             .append("\n");          }           return sql.toString();     } } ', null) [22001-196]
2018-12-18 22:51:34 jdbc[3]: exception
org.h2.jdbc.JdbcSQLException: Value too long for column "NAME VARCHAR(50)": "STRINGDECODE('aaaaapackage com.haleywang.db.mapper;  import org.apache.ibatis.mapping.MappedStatement; import tk.mybatis.mapper.... (5169)"; SQL statement:
INSERT INTO PUBLIC.STU (ID, NAME, ADATE) VALUES (1, 'aaaaapackage com.haleywang.db.mapper;  import org.apache.ibatis.mapping.MappedStatement; import tk.mybatis.mapper.entity.EntityColumn; import tk.mybatis.mapper.mapperhelper.EntityHelper; import tk.mybatis.mapper.mapperhelper.MapperHelper; import tk.mybatis.mapper.mapperhelper.MapperTemplate; import tk.mybatis.mapper.mapperhelper.SqlHelper;  import java.util.HashMap; import java.util.Map; import java.util.Set;  /**  * Created by haley on 2018/8/19.  */ public class BaseCreateTableProvider  extends MapperTemplate {       public BaseCreateTableProvider(Class<?> mapperClass, MapperHelper mapperHelper) {         super(mapperClass, mapperHelper);     }      /**      * 查询      *      * @param ms      * @return      */     public String selectOne(MappedStatement ms) {         Class<?> entityClass = getEntityClass(ms);         //修改返回值类型为实体类型         setResultType(ms, entityClass);         StringBuilder sql = new StringBuilder();         sql.append(SqlHelper.selectAllColumns(entityClass));         sql.append(SqlHelper.fromTable(entityClass, tableName(entityClass)));         sql.append(SqlHelper.whereAllIfColumns(entityClass, isNotEmpty()));         return sql.toString();     }      /**      * 查询      *      * @param ms      * @return      */     public String select(MappedStatement ms) {         Class<?> entityClass = getEntityClass(ms);         //修改返回值类型为实体类型         setResultType(ms, entityClass);         StringBuilder sql = new StringBuilder();         sql.append(SqlHelper.selectAllColumns(entityClass));         sql.append(SqlHelper.fromTable(entityClass, tableName(entityClass)));         sql.append(SqlHelper.whereAllIfColumns(entityClass, isNotEmpty()));         sql.append(SqlHelper.orderByDefault(entityClass));         return sql.toString();     }      /**      * 查询      *      * @param ms      * @return      */     public String selectByRowBounds(MappedStatement ms) {         return select(ms);     }      /**      * 根据主键进行查询      *      * @param ms      */     public String selectByPrimaryKey(MappedStatement ms) {         final Class<?> entityClass = getEntityClass(ms);         //将返回值修改为实体类型         setResultType(ms, entityClass);         StringBuilder sql = new StringBuilder();         sql.append(SqlHelper.selectAllColumns(entityClass));         sql.append(SqlHelper.fromTable(entityClass, tableName(entityClass)));         sql.append(SqlHelper.wherePKColumns(entityClass));         return sql.toString();     }      /**      * 查询总数      *      * @param ms      * @return      */     public String selectCount(MappedStatement ms) {         Class<?> entityClass = getEntityClass(ms);         StringBuilder sql = new StringBuilder();         sql.append(SqlHelper.selectCount(entityClass));         sql.append(SqlHelper.fromTable(entityClass, tableName(entityClass)));         sql.append(SqlHelper.whereAllIfColumns(entityClass, isNotEmpty()));         return sql.toString();     }      /**      * 根据主键查询总数      *      * @param ms      * @return      */     public String existsWithPrimaryKey(MappedStatement ms) {         Class<?> entityClass = getEntityClass(ms);         StringBuilder sql = new StringBuilder();         sql.append(SqlHelper.selectCountExists(entityClass));         sql.append(SqlHelper.fromTable(entityClass, tableName(entityClass)));         sql.append(SqlHelper.wherePKColumns(entityClass));         return sql.toString();     }      /**      * 查询全部结果      *      * @param ms      * @return      */     public String createTableSql(MappedStatement ms) {         final Class<?> entityClass = getEntityClass(ms);         //修改返回值类型为实体类型         setResultType(ms, entityClass);         StringBuilder sql = new StringBuilder();          Set<EntityColumn> pks = EntityHelper.getPKColumns(entityClass);         String tName = tableName(entityClass);         Set<EntityColumn> columns = EntityHelper.getColumns(entityClass);          sql.append("create table ")                 .append(tName)                 .append(" (");          int i = 0;         int n = pks.size();         for(EntityColumn pk : pks) {             //sql.append(pk.getColumn()).append(" INTEGER PRIMARY KEY AUTOINCREMENT NOT NULL UNIQUE ");             sql.append(pk.getColumn()).append(" INTEGER PRIMARY KEY AUTO_INCREMENT NOT NULL ");              if(i < n-1) {                 sql.append('','');             }             i++;         }          sql.append(" );");         sql.append("\n");           // alter sql         Map<String, String> typeMap = new HashMap<>();         typeMap.put("java.lang.String", "TEXT");         typeMap.put("java.lang.Long", "BIGINT");         typeMap.put("java.lang.Integer", "INTEGER");         typeMap.put("java.lang.Date", "DATE");         for(EntityColumn columnObj : columns) {             if(columnObj.isId()) {                 continue;             }             sql.append("ALTER TABLE ").append(tName).append(" ADD ")                     .append(columnObj.getColumn())                     .append(" ")                     .append(typeMap.getOrDefault(columnObj.getJavaType().getName(), "TEXT"))                     .append(";")             .append("\n");          }           return sql.toString();     } } ', null) [22001-196]
2018-12-18 22:52:22 jdbc[3]: exception
org.h2.jdbc.JdbcSQLException: Value too long for column "NAME VARCHAR(50)": "'aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa... (380)"; SQL statement:
INSERT INTO PUBLIC.STU (ID, NAME, ADATE) VALUES (1, 'aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa', null) [22001-196]
2018-12-18 22:54:52 jdbc[3]: exception
org.h2.jdbc.JdbcSQLException: Attempt to define a second primary key; SQL statement:
ALTER TABLE PUBLIC.STU ADD PRIMARY KEY (ID) [90017-196]
	at org.h2.message.DbException.getJdbcSQLException(DbException.java:345)
	at org.h2.message.DbException.get(DbException.java:179)
	at org.h2.message.DbException.get(DbException.java:155)
	at org.h2.message.DbException.get(DbException.java:144)
	at org.h2.command.ddl.AlterTableAddConstraint.tryUpdate(AlterTableAddConstraint.java:124)
	at org.h2.command.ddl.AlterTableAddConstraint.update(AlterTableAddConstraint.java:77)
	at org.h2.command.CommandContainer.update(CommandContainer.java:101)
	at org.h2.command.Command.executeUpdate(Command.java:260)
	at org.h2.jdbc.JdbcStatement.executeUpdateInternal(JdbcStatement.java:136)
	at org.h2.jdbc.JdbcStatement.executeUpdate(JdbcStatement.java:121)
	at com.rp.sql.SQLManager.executeUpdate(Unknown Source)
	at com.rp.sql.SQLManager.executeUpdate(Unknown Source)
	at com.rp.gui.database.QueryUtil.executeQuery(Unknown Source)
	at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
	at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.lang.reflect.Method.invoke(Method.java:498)
	at com.rp.gui.util.CustomSwingWorker.construct(Unknown Source)
	at com.rp.gui.util.SwingWorker$2.run(Unknown Source)
	at java.lang.Thread.run(Thread.java:748)
2018-12-18 22:56:36 jdbc[3]: exception
org.h2.jdbc.JdbcSQLException: Value too long for column "TITLE VARCHAR(6)": "'ooo123456' (9)"; SQL statement:
INSERT INTO PUBLIC.TT (ID, TITLE) VALUES (2, 'ooo123456') [22001-196]
2018-12-19 00:32:19 jdbc[3]: exception
org.h2.jdbc.JdbcSQLException: Table "BLOG" not found; SQL statement:
DROP TABLE PUBLIC.BLOG [42102-196]
2018-12-19 00:32:33 jdbc[3]: exception
org.h2.jdbc.JdbcSQLException: Table "REQ_BATCH" not found; SQL statement:
DROP TABLE PUBLIC.REQ_BATCH [42102-196]
2018-12-19 00:34:54 jdbc[3]: exception
org.h2.jdbc.JdbcSQLException: Table "REQ_ACCOUNT" already exists; SQL statement:
create table req_account (account_id INTEGER PRIMARY KEY AUTO_INCREMENT NOT NULL  ); [42101-197]
2018-12-19 00:34:54 jdbc[3]: exception
org.h2.jdbc.JdbcSQLException: Duplicate column name "NAME"; SQL statement:
ALTER TABLE req_account ADD name VARCHAR(50); [42121-197]
	at org.h2.message.DbException.getJdbcSQLException(DbException.java:357)
	at org.h2.message.DbException.get(DbException.java:179)
	at org.h2.message.DbException.get(DbException.java:155)
	at org.h2.table.Table.setColumns(Table.java:431)
	at org.h2.table.TableBase.<init>(TableBase.java:46)
	at org.h2.mvstore.db.MVTable.<init>(MVTable.java:128)
	at org.h2.mvstore.db.MVTableEngine.createTable(MVTableEngine.java:109)
	at org.h2.mvstore.db.MVTableEngine.createTable(MVTableEngine.java:42)
	at org.h2.schema.Schema.createTable(Schema.java:670)
	at org.h2.command.ddl.AlterTableAlterColumn.cloneTableStructure(AlterTableAlterColumn.java:393)
	at org.h2.command.ddl.AlterTableAlterColumn.copyData(AlterTableAlterColumn.java:284)
	at org.h2.command.ddl.AlterTableAlterColumn.update(AlterTableAlterColumn.java:197)
	at org.h2.command.CommandContainer.update(CommandContainer.java:102)
	at org.h2.command.Command.executeUpdate(Command.java:261)
	at org.h2.jdbc.JdbcStatement.executeInternal(JdbcStatement.java:233)
	at org.h2.jdbc.JdbcStatement.execute(JdbcStatement.java:205)
	at com.haleywang.db.DBUtils.doInitSql(DBUtils.java:126)
	at com.haleywang.monitor.service.impl.ReqBatchServiceImpl.initDb(ReqBatchServiceImpl.java:75)
	at com.haleywang.monitor.schedule.CronScheduleHelper.startSchedule(CronScheduleHelper.java:57)
	at com.haleywang.monitor.schedule.CronScheduleHelper.access$000(CronScheduleHelper.java:22)
	at com.haleywang.monitor.schedule.CronScheduleHelper$1.run(CronScheduleHelper.java:41)
	at java.lang.Thread.run(Thread.java:745)
2018-12-19 00:34:54 jdbc[3]: exception
org.h2.jdbc.JdbcSQLException: Duplicate column name "EMAIL"; SQL statement:
ALTER TABLE req_account ADD email VARCHAR(50); [42121-197]
	at org.h2.message.DbException.getJdbcSQLException(DbException.java:357)
	at org.h2.message.DbException.get(DbException.java:179)
	at org.h2.message.DbException.get(DbException.java:155)
	at org.h2.table.Table.setColumns(Table.java:431)
	at org.h2.table.TableBase.<init>(TableBase.java:46)
	at org.h2.mvstore.db.MVTable.<init>(MVTable.java:128)
	at org.h2.mvstore.db.MVTableEngine.createTable(MVTableEngine.java:109)
	at org.h2.mvstore.db.MVTableEngine.createTable(MVTableEngine.java:42)
	at org.h2.schema.Schema.createTable(Schema.java:670)
	at org.h2.command.ddl.AlterTableAlterColumn.cloneTableStructure(AlterTableAlterColumn.java:393)
	at org.h2.command.ddl.AlterTableAlterColumn.copyData(AlterTableAlterColumn.java:284)
	at org.h2.command.ddl.AlterTableAlterColumn.update(AlterTableAlterColumn.java:197)
	at org.h2.command.CommandContainer.update(CommandContainer.java:102)
	at org.h2.command.Command.executeUpdate(Command.java:261)
	at org.h2.jdbc.JdbcStatement.executeInternal(JdbcStatement.java:233)
	at org.h2.jdbc.JdbcStatement.execute(JdbcStatement.java:205)
	at com.haleywang.db.DBUtils.doInitSql(DBUtils.java:126)
	at com.haleywang.monitor.service.impl.ReqBatchServiceImpl.initDb(ReqBatchServiceImpl.java:75)
	at com.haleywang.monitor.schedule.CronScheduleHelper.startSchedule(CronScheduleHelper.java:57)
	at com.haleywang.monitor.schedule.CronScheduleHelper.access$000(CronScheduleHelper.java:22)
	at com.haleywang.monitor.schedule.CronScheduleHelper$1.run(CronScheduleHelper.java:41)
	at java.lang.Thread.run(Thread.java:745)
2018-12-19 00:34:54 jdbc[3]: exception
org.h2.jdbc.JdbcSQLException: Duplicate column name "PASSWORD"; SQL statement:
ALTER TABLE req_account ADD password VARCHAR(50); [42121-197]
	at org.h2.message.DbException.getJdbcSQLException(DbException.java:357)
	at org.h2.message.DbException.get(DbException.java:179)
	at org.h2.message.DbException.get(DbException.java:155)
	at org.h2.table.Table.setColumns(Table.java:431)
	at org.h2.table.TableBase.<init>(TableBase.java:46)
	at org.h2.mvstore.db.MVTable.<init>(MVTable.java:128)
	at org.h2.mvstore.db.MVTableEngine.createTable(MVTableEngine.java:109)
	at org.h2.mvstore.db.MVTableEngine.createTable(MVTableEngine.java:42)
	at org.h2.schema.Schema.createTable(Schema.java:670)
	at org.h2.command.ddl.AlterTableAlterColumn.cloneTableStructure(AlterTableAlterColumn.java:393)
	at org.h2.command.ddl.AlterTableAlterColumn.copyData(AlterTableAlterColumn.java:284)
	at org.h2.command.ddl.AlterTableAlterColumn.update(AlterTableAlterColumn.java:197)
	at org.h2.command.CommandContainer.update(CommandContainer.java:102)
	at org.h2.command.Command.executeUpdate(Command.java:261)
	at org.h2.jdbc.JdbcStatement.executeInternal(JdbcStatement.java:233)
	at org.h2.jdbc.JdbcStatement.execute(JdbcStatement.java:205)
	at com.haleywang.db.DBUtils.doInitSql(DBUtils.java:126)
	at com.haleywang.monitor.service.impl.ReqBatchServiceImpl.initDb(ReqBatchServiceImpl.java:75)
	at com.haleywang.monitor.schedule.CronScheduleHelper.startSchedule(CronScheduleHelper.java:57)
	at com.haleywang.monitor.schedule.CronScheduleHelper.access$000(CronScheduleHelper.java:22)
	at com.haleywang.monitor.schedule.CronScheduleHelper$1.run(CronScheduleHelper.java:41)
	at java.lang.Thread.run(Thread.java:745)
2018-12-19 00:34:54 jdbc[3]: exception
org.h2.jdbc.JdbcSQLException: Duplicate column name "AKEY"; SQL statement:
ALTER TABLE req_account ADD akey VARCHAR(50); [42121-197]
	at org.h2.message.DbException.getJdbcSQLException(DbException.java:357)
	at org.h2.message.DbException.get(DbException.java:179)
	at org.h2.message.DbException.get(DbException.java:155)
	at org.h2.table.Table.setColumns(Table.java:431)
	at org.h2.table.TableBase.<init>(TableBase.java:46)
	at org.h2.mvstore.db.MVTable.<init>(MVTable.java:128)
	at org.h2.mvstore.db.MVTableEngine.createTable(MVTableEngine.java:109)
	at org.h2.mvstore.db.MVTableEngine.createTable(MVTableEngine.java:42)
	at org.h2.schema.Schema.createTable(Schema.java:670)
	at org.h2.command.ddl.AlterTableAlterColumn.cloneTableStructure(AlterTableAlterColumn.java:393)
	at org.h2.command.ddl.AlterTableAlterColumn.copyData(AlterTableAlterColumn.java:284)
	at org.h2.command.ddl.AlterTableAlterColumn.update(AlterTableAlterColumn.java:197)
	at org.h2.command.CommandContainer.update(CommandContainer.java:102)
	at org.h2.command.Command.executeUpdate(Command.java:261)
	at org.h2.jdbc.JdbcStatement.executeInternal(JdbcStatement.java:233)
	at org.h2.jdbc.JdbcStatement.execute(JdbcStatement.java:205)
	at com.haleywang.db.DBUtils.doInitSql(DBUtils.java:126)
	at com.haleywang.monitor.service.impl.ReqBatchServiceImpl.initDb(ReqBatchServiceImpl.java:75)
	at com.haleywang.monitor.schedule.CronScheduleHelper.startSchedule(CronScheduleHelper.java:57)
	at com.haleywang.monitor.schedule.CronScheduleHelper.access$000(CronScheduleHelper.java:22)
	at com.haleywang.monitor.schedule.CronScheduleHelper$1.run(CronScheduleHelper.java:41)
	at java.lang.Thread.run(Thread.java:745)
2018-12-19 00:34:54 jdbc[3]: exception
org.h2.jdbc.JdbcSQLException: Duplicate column name "TOKEN"; SQL statement:
ALTER TABLE req_account ADD token VARCHAR(50); [42121-197]
	at org.h2.message.DbException.getJdbcSQLException(DbException.java:357)
	at org.h2.message.DbException.get(DbException.java:179)
	at org.h2.message.DbException.get(DbException.java:155)
	at org.h2.table.Table.setColumns(Table.java:431)
	at org.h2.table.TableBase.<init>(TableBase.java:46)
	at org.h2.mvstore.db.MVTable.<init>(MVTable.java:128)
	at org.h2.mvstore.db.MVTableEngine.createTable(MVTableEngine.java:109)
	at org.h2.mvstore.db.MVTableEngine.createTable(MVTableEngine.java:42)
	at org.h2.schema.Schema.createTable(Schema.java:670)
	at org.h2.command.ddl.AlterTableAlterColumn.cloneTableStructure(AlterTableAlterColumn.java:393)
	at org.h2.command.ddl.AlterTableAlterColumn.copyData(AlterTableAlterColumn.java:284)
	at org.h2.command.ddl.AlterTableAlterColumn.update(AlterTableAlterColumn.java:197)
	at org.h2.command.CommandContainer.update(CommandContainer.java:102)
	at org.h2.command.Command.executeUpdate(Command.java:261)
	at org.h2.jdbc.JdbcStatement.executeInternal(JdbcStatement.java:233)
	at org.h2.jdbc.JdbcStatement.execute(JdbcStatement.java:205)
	at com.haleywang.db.DBUtils.doInitSql(DBUtils.java:126)
	at com.haleywang.monitor.service.impl.ReqBatchServiceImpl.initDb(ReqBatchServiceImpl.java:75)
	at com.haleywang.monitor.schedule.CronScheduleHelper.startSchedule(CronScheduleHelper.java:57)
	at com.haleywang.monitor.schedule.CronScheduleHelper.access$000(CronScheduleHelper.java:22)
	at com.haleywang.monitor.schedule.CronScheduleHelper$1.run(CronScheduleHelper.java:41)
	at java.lang.Thread.run(Thread.java:745)
2018-12-19 00:34:54 jdbc[3]: exception
org.h2.jdbc.JdbcSQLException: Duplicate column name "TYPE"; SQL statement:
ALTER TABLE req_account ADD type VARCHAR(50); [42121-197]
	at org.h2.message.DbException.getJdbcSQLException(DbException.java:357)
	at org.h2.message.DbException.get(DbException.java:179)
	at org.h2.message.DbException.get(DbException.java:155)
	at org.h2.table.Table.setColumns(Table.java:431)
	at org.h2.table.TableBase.<init>(TableBase.java:46)
	at org.h2.mvstore.db.MVTable.<init>(MVTable.java:128)
	at org.h2.mvstore.db.MVTableEngine.createTable(MVTableEngine.java:109)
	at org.h2.mvstore.db.MVTableEngine.createTable(MVTableEngine.java:42)
	at org.h2.schema.Schema.createTable(Schema.java:670)
	at org.h2.command.ddl.AlterTableAlterColumn.cloneTableStructure(AlterTableAlterColumn.java:393)
	at org.h2.command.ddl.AlterTableAlterColumn.copyData(AlterTableAlterColumn.java:284)
	at org.h2.command.ddl.AlterTableAlterColumn.update(AlterTableAlterColumn.java:197)
	at org.h2.command.CommandContainer.update(CommandContainer.java:102)
	at org.h2.command.Command.executeUpdate(Command.java:261)
	at org.h2.jdbc.JdbcStatement.executeInternal(JdbcStatement.java:233)
	at org.h2.jdbc.JdbcStatement.execute(JdbcStatement.java:205)
	at com.haleywang.db.DBUtils.doInitSql(DBUtils.java:126)
	at com.haleywang.monitor.service.impl.ReqBatchServiceImpl.initDb(ReqBatchServiceImpl.java:75)
	at com.haleywang.monitor.schedule.CronScheduleHelper.startSchedule(CronScheduleHelper.java:57)
	at com.haleywang.monitor.schedule.CronScheduleHelper.access$000(CronScheduleHelper.java:22)
	at com.haleywang.monitor.schedule.CronScheduleHelper$1.run(CronScheduleHelper.java:41)
	at java.lang.Thread.run(Thread.java:745)
2018-12-19 00:36:30 database: flush
org.h2.message.DbException: General error: "java.lang.IllegalStateException: The file is locked: nio:/Users/haley/Documents/w/OmegaTester/data1/h2db.mv.db [1.4.197/7]" [50000-197]
	at org.h2.message.DbException.get(DbException.java:168)
	at org.h2.message.DbException.convert(DbException.java:307)
	at org.h2.mvstore.db.MVTableEngine$1.uncaughtException(MVTableEngine.java:95)
	at org.h2.mvstore.MVStore.handleException(MVStore.java:2506)
	at org.h2.mvstore.MVStore.panic(MVStore.java:383)
	at org.h2.mvstore.MVStore.<init>(MVStore.java:364)
	at org.h2.mvstore.MVStore$Builder.open(MVStore.java:2934)
	at org.h2.mvstore.db.MVTableEngine$Store.open(MVTableEngine.java:155)
	at org.h2.mvstore.db.MVTableEngine.init(MVTableEngine.java:100)
	at org.h2.engine.Database.getPageStore(Database.java:2538)
	at org.h2.engine.Database.open(Database.java:709)
	at org.h2.engine.Database.openDatabase(Database.java:286)
	at org.h2.engine.Database.<init>(Database.java:280)
	at org.h2.engine.Engine.openSession(Engine.java:66)
	at org.h2.engine.Engine.openSession(Engine.java:179)
	at org.h2.engine.Engine.createSessionAndValidate(Engine.java:157)
	at org.h2.engine.Engine.createSession(Engine.java:140)
	at org.h2.engine.Engine.createSession(Engine.java:28)
	at org.h2.engine.SessionRemote.connectEmbeddedOrServer(SessionRemote.java:351)
	at org.h2.jdbc.JdbcConnection.<init>(JdbcConnection.java:124)
	at org.h2.jdbc.JdbcConnection.<init>(JdbcConnection.java:103)
	at org.h2.Driver.connect(Driver.java:69)
	at java.sql.DriverManager.getConnection(DriverManager.java:664)
	at java.sql.DriverManager.getConnection(DriverManager.java:208)
	at org.apache.ibatis.datasource.unpooled.UnpooledDataSource.doGetConnection(UnpooledDataSource.java:201)
	at org.apache.ibatis.datasource.unpooled.UnpooledDataSource.doGetConnection(UnpooledDataSource.java:196)
	at org.apache.ibatis.datasource.unpooled.UnpooledDataSource.getConnection(UnpooledDataSource.java:93)
	at org.apache.ibatis.datasource.pooled.PooledDataSource.popConnection(PooledDataSource.java:404)
	at org.apache.ibatis.datasource.pooled.PooledDataSource.getConnection(PooledDataSource.java:90)
	at org.apache.ibatis.transaction.jdbc.JdbcTransaction.openConnection(JdbcTransaction.java:139)
	at org.apache.ibatis.transaction.jdbc.JdbcTransaction.getConnection(JdbcTransaction.java:61)
	at org.apache.ibatis.executor.BaseExecutor.getConnection(BaseExecutor.java:338)
	at org.apache.ibatis.executor.SimpleExecutor.prepareStatement(SimpleExecutor.java:84)
	at org.apache.ibatis.executor.SimpleExecutor.doQuery(SimpleExecutor.java:62)
	at org.apache.ibatis.executor.BaseExecutor.queryFromDatabase(BaseExecutor.java:326)
	at org.apache.ibatis.executor.BaseExecutor.query(BaseExecutor.java:156)
	at org.apache.ibatis.executor.CachingExecutor.query(CachingExecutor.java:109)
	at org.apache.ibatis.executor.CachingExecutor.query(CachingExecutor.java:83)
	at org.apache.ibatis.session.defaults.DefaultSqlSession.selectList(DefaultSqlSession.java:148)
	at org.apache.ibatis.session.defaults.DefaultSqlSession.selectList(DefaultSqlSession.java:141)
	at org.apache.ibatis.binding.MapperMethod.executeForMany(MapperMethod.java:139)
	at org.apache.ibatis.binding.MapperMethod.execute(MapperMethod.java:76)
	at org.apache.ibatis.binding.MapperProxy.invoke(MapperProxy.java:59)
	at com.sun.proxy.$Proxy24.selectAll(Unknown Source)
	at com.haleywang.monitor.service.impl.BaseServiceImpl.findAll(BaseServiceImpl.java:45)
	at com.haleywang.monitor.schedule.CronScheduleHelper.startSchedule(CronScheduleHelper.java:59)
	at com.haleywang.monitor.schedule.CronScheduleHelper.access$000(CronScheduleHelper.java:22)
	at com.haleywang.monitor.schedule.CronScheduleHelper$1.run(CronScheduleHelper.java:41)
	at java.lang.Thread.run(Thread.java:745)
Caused by: org.h2.jdbc.JdbcSQLException: General error: "java.lang.IllegalStateException: The file is locked: nio:/Users/haley/Documents/w/OmegaTester/data1/h2db.mv.db [1.4.197/7]" [50000-197]
	at org.h2.message.DbException.getJdbcSQLException(DbException.java:357)
	... 49 more
Caused by: java.lang.IllegalStateException: The file is locked: nio:/Users/haley/Documents/w/OmegaTester/data1/h2db.mv.db [1.4.197/7]
	at org.h2.mvstore.DataUtils.newIllegalStateException(DataUtils.java:870)
	at org.h2.mvstore.FileStore.open(FileStore.java:173)
	at org.h2.mvstore.MVStore.<init>(MVStore.java:350)
	... 43 more
